import Head from 'next/head'

import { getSession, signIn } from "next-auth/react"

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faFacebook, faGithub, faGoogle } from '@fortawesome/free-brands-svg-icons'
import { useState } from 'react'


export default function Signin(context) {

  const [emailInput, setEmailInput] = useState("")
  
  const handleForm =(e) => {
    e.preventDefault()
    signIn('email',{ email: emailInput }, { callbackUrl: "/" })
  }

  return (
    <main className='w-full h-screen flex'>
      <Head>
        <title>Sign In | Blog</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className='hidden w-1/2 bg-blue-500 rounded rounded-r-none lg:block'></div>

      <form action="" className='w-full lg:w-1/2 h-full bg-white rounded rounded-l-none flex flex-col justify-center' onSubmit={ handleForm }>

        {/* Logo */}

        {/* Error Message */}
        {context.error && <div className='p-4 shadow bg-red-500 text-center mx-auto rounded mb-8 absolute top-0 rounded-t-none'>
          <p>The email you used is already associated with another provider. Please sign in using the original provider you used...</p>
        </div>}

        {/* Header */}
        <header className='w-96 mx-auto px-4 mb-8'>
          <h1 className='text-3xl font-semibold text-center mb-2'>Hello Again!</h1>
          <p className='text-sm text-gray-500 text-center'>A Blog Is Your Safe Space In a Unsafe World</p>
        </header>

        {/* Email and Password */}
        <div className='flex flex-col items-center w-full'>

          <div className='w-96 flex shadow-sm my-2'>
            <input type="email" className=' w-full p-3 rounded rounded-r-none border-r-0 bg-gray-50 outline-none border-2 duration-100 text-sm text-gray-400' placeholder='Email' required value={emailInput} onInput={ (e) => {setEmailInput(e.target.value)}}/>

            <aside className='h-full w-12 flex items-center rounded rounded-l-none border-2 border-l-0 bg-gray-50'>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 stroke-gray-400" fill="none" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
              </svg>
            </aside>
          </div>
          <button type='submit' className='p-3 w-96 bg-blue-500 hover:bg-blue-600 duration-200 mx-auto text-white rounded my-2'>Sign In</button>
        </div>

        <hr className='my-12'/>

        {/* Signin and Oauth Button */}
        <div className='flex flex-col items-center w-full text-sm'>

          {/* Github */}
          <button type='button' className='flex justify-center cursor-pointer items-center p-3 w-96 bg-white border-2 border-gray-200 hover:border-gray-300 duration-200 mx-auto text-gray-400 rounded my-1' onClick={ () => {signIn('github', { callbackUrl: "/" })}}>
            <FontAwesomeIcon icon={ faGithub } className="h-5 mx-2"/>
            <p type='button' className=''>Sign In with Github</p>
          </button>

          {/* Facebook */}
          <button type='button' className='flex justify-center cursor-pointer items-center p-3 w-96 bg-white border-2 border-gray-200 hover:border-gray-300 duration-200 mx-auto text-gray-400 rounded my-1' onClick={ () => {signIn('facebook', { callbackUrl: "/" })}}>
            <FontAwesomeIcon icon={ faFacebook } className="h-5 mx-2"/>
            <p type='button' className=''>Sign In with Facebook</p>
          </button>

          {/* Google */}
          <button type='button' className='flex justify-center cursor-pointer items-center p-3 w-96 bg-white border-2 border-gray-200 hover:border-gray-300 duration-200 mx-auto text-gray-400 rounded my-1' onClick={ () => {signIn('google', { callbackUrl: "/" })}}>
            <FontAwesomeIcon icon={ faGoogle } className="h-5 mx-2"/>
            <p type='button' className=''>Sign In with Google</p>
          </button>

        </div>
      </form>
    </main>
  )
}

export async function getServerSideProps(context){
  try {
    const session = await getSession(context)
    if(session) return { redirect: { destination: '/', permanent: false } }
    if(context.query.error) return { props: {error: context.query.error} }
    return { props: { } }
    
  } catch (error) {
    console.log(error)
  }
}
